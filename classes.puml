@startuml classes
set namespaceSeparator none
class "BagOfWordsExtractor" as src.svuchatbot_preprocess.bag_of_words_extractor.BagOfWordsExtractor {
  bag : list
  bag_dict : dict
  n_gram : int
  t_col_name : str
  t_db_name
  work(do)
}
class "Definitions" as src.svuchatbot_features_managment.key_words_extractor.Definitions {
  BAGOFWORDSEXTRACION : str
  FEATURESSETUP : str
  MORPHOLOGICALTOKENIZATION : str
  NORMALIZATION : str
  SIMPLETOKENIZATION : str
  SPECIALWORDSEXTRACTION : str
  STOPWORDSREMOVING : str
  TFIDFEXTRACTION : str
}
class "Definitions" as src.svuchatbot_const.db.definitions.Definitions {
  ANSWERFIELDNAME : str
  ANSWERSIMPLETOKENSFIELDNAME : str
  BAGOFWORDSCOLLECTIONNAME1GRAM : str
  BAGOFWORDSCOLLECTIONNAME2GRAM : str
  BAGOFWORDSCOLLECTIONNAME3GRAM : str
  BAGOFWORDSCOLLECTIONNAME4GRAM : str
  BAGOFWORDSCOLLECTIONNAME5GRAM : str
  BAGOFWORDSDBNAME : str
  PARSSEDEMAILSCOLLECTIONNAME : str
  PARSSEDEMAILSDBNAME : str
  PATTERNSCOLLECTIONNAME : str
  PATTERNSDBNAME : str
  PATTERNSFREQUENCYCOLLECTIONNAME : str
  PSTDBNAME : str
  QUESTIONFIELDNAME : str
  QUESTIONSIMPLETOKENSFIELDNAME : str
  SENTCOLLECTIONNAME : str
  SIMPLETOKENSFIELDNAME : str
  SPECIALWORDSFIELDNAME : str
  SPECIALWORDSFIELDNAMEFROMANSWER : str
  SPECIALWORDSFIELDNAMEFROMQUESTION : str
  TFIDFDBNAME : str
  TOKENSFIELDNAME : str
  WEIGHTSDBNAME : str
}
class "Elector" as src.svuchatbot_preprocess.cleand_tokens_extractor.Elector {
  arabic_stopwords_based_filter_stopwords_for_sentence(sent)
  filter_stopwords_for_sentence(sent, ostp)
  nltk_based_filter_stopwords_for_sentence(sent)
}
class "EmailsClustering" as src.root.EmailsClustering {
  steps_dict : dict
  set_available_methods()
  split_emails_based_on_kmeans_clustering()
}
class "EntitiesExtractor" as src.svuchatbot_preprocess.entities_extractor.EntitiesExtractor {
  extract_entities_for_sentence(sent, ner)
}
class "Extractor" as src.svuchatbot_preprocess.extractor.Extractor {
  based_on : str
  col
  col_name
  consecutive : bool
  db_name
  field_name
  n_cores
  work(do)
}
class "FeaturesExtraction" as src.root.FeaturesExtraction {
  steps_dict : dict
  extract_answer_simple_tokens()
  extract_entities_from_answers()
  extract_morphological_patterns()
  extract_question_simple_tokens()
  extract_sentiment_from_questions()
  extract_special_words_from_answer()
  extract_special_words_from_question()
  replace_special_words_from_answer()
  replace_special_words_from_question()
  set_available_methods()
}
class "Filter" as src.svuchatbot_preprocess.filter.Filter {
  s_col
  s_col_name
  s_db_name
  t_col
  t_col_name
  t_db_name
  correct_sentences(field, sents, replacements)
  correct_sentences_old(field, sents, replacements)
  exclude_duplicated(field)
  exclude_emails_containing_word(field, word)
  exclude_emails_writen_in_foreign_language(field)
  exclude_empty_emails(field)
  finding_incomprehensible_words()
}
class "IntentionsGenerator" as src.svuchatbot_generator.intentions_generator.IntentionsGenerator {
  source
  tags_intentions : dict
  tags_utter : dict
  work()
}
class "KeyWordExtractors" as src.svuchatbot_features_managment.key_words_extractor.KeyWordExtractors {
  bag_of_words
  col_name
  cpu_count
  db_name
  df_bag_of_words
  feature_names : list
  field_name
  min_weight
  ngram : str
  normalize : bool
  pipe : list
  pipe_dict : dict
  prefix : str
  reset_db : bool
  source
  get_pipe()
  set_pipe(pipe)
  work()
}
class "MailsSinker" as src.svuchatbot_sink.mai_server_sink.MailsSinker {
  col_name
  d_path
  db_name
  find_replies()
  insert_emails_into_db()
}
class "MorphologicalFeaturesExtractor" as src.svuchatbot_features_managment.features_extractor.MorphologicalFeaturesExtractor {
}
class "MorphologyBasedTokensExtractor" as src.svuchatbot_features_managment.morphology_based_tokens_extractor.MorphologyBasedTokensExtractor {
}
class "MyKmeans" as src.svuchatbot_clustering.kmeans_based_clustering.MyKmeans {
  BOW_col_name
  BOW_db_name
  X : NoneType
  cleaner
  columns : list
  df_X : DataFrame
  feature_number : int
  field_name
  intent_file_name
  k_means_clusters : int
  mails_col_name
  mails_db_name
  model : KMeans
  n_gram : int
  pca : PCA
  pca_scores : ndarray
  segmentation_std : str
  specializations_from_answers : bool
  specializations_from_questions : bool
  utter_file_name
  calculate_pca()
  fetch()
  fetch_old()
  fetch_specializations()
  fit()
  kmeans_fit()
  kmeans_with_pca_fit()
  standardization()
  to_yaml()
  update_db()
}
class "MySVM" as src.svuchatbot_clustering.svm_based_cluster.MySVM {
  X
  Y
  clf : SVC
  fit()
  predict(X)
}
class "Normalizer" as src.svuchatbot_preprocess.orthographic_normalization.Normalizer {
  word : bool
}
class "PST" as src.svuchatbot_sink.pst_sink.PST {
  db_name
  n_cores
  path
  sink()
}
class "PSTParser" as src.svuchatbot_parsing.parse_pst.PSTParser {
  from_col
  from_db : str
  grammar : str
  patterns : list
  to_col
  to_db : str
  update : bool
  parse()
  parse_bcc(header)
  parse_body(body, tag)
  parse_cc(header)
  parse_date(header)
  parse_email(email)
  parse_from(header)
  parse_header(header)
  parse_message(message, cp)
  parse_sent(header)
  parse_subject(header)
  parse_to(header)
  set_grammar()
}
class "PatternExtractor" as src.svuchatbot_features_managment.pattern_extractor.PatternExtractor {
  important_words
  n_gram : int
  prefix : str
  t_col_name
  t_db_name
  threshold : float
}
class "PreProcess" as src.root.PreProcess {
  steps_dict : dict
  correct_words()
  drop_emojis()
  drop_sentences()
  parse_bcc()
  parse_cc()
  parse_date()
  parse_emails()
  parse_from()
  parse_sent()
  parse_subject()
  parse_to()
  read_pst_file()
  remove_corona_emails()
  remove_duplicated_questions()
  remove_emails_contain_question_in_replay()
  remove_empty_questions()
  remove_forwarded_emails()
  remove_non_arabic_answers()
  remove_non_arabic_questions()
  set_available_methods()
  shortening_spaces()
}
class "RootBasedBagOfWordsExtractor" as src.svuchatbot_features_managment.root_based_bag_of_words_extractor.RootBasedBagOfWordsExtractor {
  work()
}
class "SentimentExtractor" as src.svuchatbot_preprocess.sentiment_extractor.SentimentExtractor {
  camel_based_sentiment_analyser_for_sentence(sent, sa)
}
class "SimpleTokensExtractor" as src.svuchatbot_features_managment.simple_tokens_extractor.SimpleTokensExtractor {
}
class "SimpleWorker" as src.svuchatbot_preprocess.simple_worker.SimpleWorker {
  do
  filter : dict
}
class "SingletonClient" as src.svuchatbot_mogodb.client.SingletonClient {
  client : MongoClient
}
class "Sinker" as src.svuchatbot_sink.sinker.Sinker {
  db_name
  n_cores
  path
}
class "SpecialWordExtraction" as src.svuchatbot_preprocess.special_words_extractor.SpecialWordExtraction {
}
class "SpecialWordsReplacement" as src.svuchatbot_preprocess.special_words_replacment.SpecialWordsReplacement {
  from_field_name
  from_field_pattern_index : int
  from_field_replacement_index : int
}
class "Steps" as src.root.Steps {
  CORRECTWORDS : str
  DROPEMOJIS : str
  DROPSENTENCES : str
  EXTRACTENTITIESFROMANSWERS : str
  EXTRACTSENTIMENTFROMQUESTIONS : str
  EXTRACTSIMPLETOKENSFROMANSWER : str
  EXTRACTSIMPLETOKENSFROMQUESTION : str
  EXTRACTSPECIALWORDS : str
  EXTRACTSPECIALWORDSFROMANSWER : str
  EXTRACTSPECIALWORDSFROMQUESTION : str
  KMEANSBASEDCLUSTERING : str
  PARSEBCCFIELD : str
  PARSECCFIELD : str
  PARSEDATEFIELD : str
  PARSEEMAILS : str
  PARSEFROMFIELD : str
  PARSESENTFIELD : str
  PARSESUBJECTFIELD : str
  PARSETOFIELD : str
  READPSTFILE : str
  REMOVEDUPLICATEDQUESTIONS : str
  REMOVEEMAILSCONTAINSQUESTIONINREPLAY : str
  REMOVEEMAILSRELATEDTOCORONA : str
  REMOVEEMPTYQUESTION : str
  REMOVEFORWARDEDEMAILS : str
  REMOVEGREETINGSENTINCESESFROMQUESTIONS : str
  REMOVENONARABICANSWERS : str
  REMOVENONARABICQUESTIONS : str
  REPLACESPECIALWORDS : str
  REPLACESPECIALWORDSFROMANSWER : str
  REPLACESPECIALWORDSFROMQUESTION : str
  SHORTENINIGSPACES : str
}
class "StringCleaner" as src.svuchatbot_helper.cleaner.StringCleaner {
  text
  correct_word(word, replacement)
  drop_many_spaces()
  drop_meta_data_of_message()
  drop_new_line()
  drop_special_characters()
  drop_special_word(word)
}
class "TFIDFExtractor" as src.svuchatbot_features_managment.tfidf_extractor.TFIDFExtractor {
  bag_of_words
  feature_names
  ngram
  tfidf_db_name : str
  weights_db_name : str
  work()
}
class "TokensExtractor" as src.svuchatbot_preprocess.tokens_extractor.TokensExtractor {
  t_col_name : str
  type : str
  camel_morphological_based_tokenize_for_sentence(tokens)
  camel_simple_based_tokenize_for_sentence(sent)
  nltk_based_tokenize_for_sentence(sent)
  special_words_tokenize_for_sentence(sent)
}
class "Workflow" as src.root.Workflow {
  steps : list
  steps_dict : dict
  run()
  set_available_methods()
  transform(steps)
}
src.root.EmailsClustering --|> src.root.Workflow
src.root.FeaturesExtraction --|> src.root.Workflow
src.root.PreProcess --|> src.root.Workflow
src.svuchatbot_features_managment.features_extractor.MorphologicalFeaturesExtractor --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_features_managment.morphology_based_tokens_extractor.MorphologyBasedTokensExtractor --|> src.svuchatbot_preprocess.tokens_extractor.TokensExtractor
src.svuchatbot_features_managment.pattern_extractor.PatternExtractor --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_features_managment.root_based_bag_of_words_extractor.RootBasedBagOfWordsExtractor --|> src.svuchatbot_features_managment.key_words_extractor.KeyWordExtractors
src.svuchatbot_features_managment.simple_tokens_extractor.SimpleTokensExtractor --|> src.svuchatbot_preprocess.tokens_extractor.TokensExtractor
src.svuchatbot_preprocess.bag_of_words_extractor.BagOfWordsExtractor --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_preprocess.cleand_tokens_extractor.Elector --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_preprocess.entities_extractor.EntitiesExtractor --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_preprocess.orthographic_normalization.Normalizer --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_preprocess.sentiment_extractor.SentimentExtractor --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_preprocess.simple_worker.SimpleWorker --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_preprocess.special_words_extractor.SpecialWordExtraction --|> src.svuchatbot_preprocess.tokens_extractor.TokensExtractor
src.svuchatbot_preprocess.special_words_replacment.SpecialWordsReplacement --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_preprocess.tokens_extractor.TokensExtractor --|> src.svuchatbot_preprocess.extractor.Extractor
src.svuchatbot_helper.cleaner.StringCleaner --* src.svuchatbot_clustering.kmeans_based_clustering.MyKmeans : cleaner
@enduml
